
==================== Create Common traits to show success/error messages(uses in Controller and other place)===================================
  --Go/Create Traits/ApiResponser.php
<?php
namespace App\Traits;
use Illuminate\Http\Response;
	trait ApiResponser{
	    public function successResponse($data,  $code = Response::HTTP_OK){
		return response()->json(['data'=>$data], $code);
	    }
	    public function errorResponse($message,  $code){
		return response()->json(['error'=>$message, 'code'=>$code], $code);
	    }
	}


=======================How to handle exception with ERROR CODE Lets say when we type wrong url/methode for route like: "error": "Method Not Allowed", "Code": 405?=================
	--Go/Create Exceptions>Handler.php and Add my trait(ApiResponser)
----
use App\Traits\ApiResponser;
use Illuminate\Http\Response;
use Illuminate\Auth\AuthenticationException;

class Handler extends ExceptionHandler
{
	use ApiResponser; //This trait to connect $this->errorResponse()
---
---
public function render($request, Throwable $exception)
    {
        if ($exception instanceof HttpException) {
            $code = $exception->getStatusCode();
            $message = Response::$statusTexts[$code];

            return $this->errorResponse($message, $code);
        }

        if ($exception instanceof ModelNotFoundException) {
            $model = strtolower(class_basename($exception->getModel()));

            return $this->errorResponse("Does not exist any instance of {$model} with the given id", Response::HTTP_NOT_FOUND);
        }

        if ($exception instanceof AuthorizationException) {
            return $this->errorResponse($exception->getMessage(), Response::HTTP_FORBIDDEN);
        }

        if ($exception instanceof AuthenticationException) {
            return $this->errorResponse($exception->getMessage(), Response::HTTP_UNAUTHORIZED);
        }

        if ($exception instanceof ValidationException) {
            $errors = $exception->validator->errors()->getMessages();

            return $this->errorResponse($errors, Response::HTTP_UNPROCESSABLE_ENTITY);
        }

        return $this->errorResponse('Unexpected error. Try later', Response::HTTP_INTERNAL_SERVER_ERROR);
    }
